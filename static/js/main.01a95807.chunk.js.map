{"version":3,"sources":["components/Form/Form.js","components/FormContainer/FormContainer.js","App.js","reportWebVitals.js","index.js"],"names":["FormWrapper","styled","form","schema","yup","shape","name","required","preparation_time","type","no_of_slices","when","is","then","typeError","diameter","spiciness_scale","slices_of_bread","Form","useState","selectedDate","setSelectedDate","types","setTypes","pizza","setPizza","soup","setSoup","sandwich","setSandwich","useForm","resolver","yupResolver","register","handleSubmit","errors","reset","formState","useEffect","onSubmit","data","axios","post","res","console","log","alert","TextField","InputLabelProps","className","style","overflow","label","InputProps","error","helperText","message","TimePicker","ampm","openTo","views","format","value","onChange","id","select","e","target","inputProps","MenuItem","step","min","max","Button","variant","color","useStyles","makeStyles","root","width","maxWidth","padding","opacity","title","fontSize","marginBottom","FormContainer","children","classes","Card","CardContent","Typography","gutterBottom","Wrapper","div","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","utils","DateFnsUtils","document","getElementById"],"mappings":"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","file":"static/js/main.01a95807.chunk.js","sourcesContent":["import { yupResolver } from '@hookform/resolvers/yup';\nimport { Button, MenuItem, TextField } from '@material-ui/core';\nimport { TimePicker } from '@material-ui/pickers';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport styled from 'styled-components';\nimport * as yup from 'yup';\n\nconst FormWrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-items: center;\n  width: 100%;\n\n  .customField {\n    margin-top: 20px;\n  }\n\n  .field {\n    overflow: hidden;\n  }\n`;\n\nconst schema = yup.object().shape({\n  name: yup.string().required('Name is required'),\n  preparation_time: yup.string().required('Preparation time is required'),\n  type: yup.string().required('Dish type is required'),\n  no_of_slices: yup.mixed().when('type', {\n    is: (type) => type === 'pizza',\n    then: yup.number().typeError('Number of slices is required').required(),\n  }),\n  diameter: yup.mixed().when('type', {\n    is: (type) => type === 'pizza',\n    then: yup.number().typeError('Diameter is required').required(),\n  }),\n  spiciness_scale: yup.mixed().when('type', {\n    is: (type) => type === 'soup',\n    then: yup.number().typeError('Spiciness scale is required').required(),\n  }),\n  slices_of_bread: yup.mixed().when('type', {\n    is: (type) => type === 'sandwich',\n    then: yup.number().typeError('Slices of bread is required').required(),\n  }),\n});\n\nconst Form = () => {\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [types, setTypes] = useState('');\n  const [pizza, setPizza] = useState(false);\n  const [soup, setSoup] = useState(false);\n  const [sandwich, setSandwich] = useState(false);\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({ resolver: yupResolver(schema) });\n\n  const handleSend = (data) => {\n    axios\n      .post(`https://frosty-wood-6558.getsandbox.com:443/dishes`, data)\n      .then((res) => {\n        console.log(res);\n        alert('Request send');\n      });\n  };\n\n  useEffect(() => {\n    if (types === 'pizza') {\n      setPizza(true);\n      setSoup(false);\n      setSandwich(false);\n    }\n    if (types === 'soup') {\n      setPizza(false);\n      setSoup(true);\n      setSandwich(false);\n    }\n\n    if (types === 'sandwich') {\n      setPizza(false);\n      setSoup(false);\n      setSandwich(true);\n    }\n  }, [types]);\n\n  return (\n    <FormWrapper onSubmit={handleSubmit(handleSend)}>\n      <TextField\n        InputLabelProps={{\n          className: 'field',\n        }}\n        style={{ overflow: 'hidden' }}\n        label=\"Name\"\n        InputProps={{ ...register('name') }}\n        error={!!errors.name}\n        helperText={errors.name?.message}\n      />\n      <TimePicker\n        className=\"customField\"\n        InputLabelProps={{\n          className: 'field',\n        }}\n        ampm={false}\n        openTo=\"hours\"\n        views={['hours', 'minutes', 'seconds']}\n        format=\"HH:mm:ss\"\n        label=\"Preparation time\"\n        value={selectedDate}\n        onChange={setSelectedDate}\n        InputProps={{ ...register('preparation_time') }}\n        error={!!errors.preparation_time}\n        helperText={errors.preparation_time?.message}\n      />\n      <TextField\n        id=\"standard-select-currency\"\n        InputLabelProps={{\n          className: 'field',\n        }}\n        select\n        className=\"customField\"\n        label=\"Dish type\"\n        value={types}\n        onChange={(e) => {\n          setTypes(e.target.value);\n        }}\n        inputProps={{ ...register('type') }}\n        error={!!errors.type}\n        helperText={errors.type?.message}\n      >\n        <MenuItem value=\"pizza\">Pizza</MenuItem>\n        <MenuItem value=\"soup\">Soup</MenuItem>\n        <MenuItem value=\"sandwich\">Sandwich</MenuItem>\n      </TextField>\n      {pizza ? (\n        <>\n          <TextField\n            className=\"customField\"\n            InputLabelProps={{\n              className: 'field',\n            }}\n            style={{ overflow: 'hidden' }}\n            id=\"standard-basic\"\n            label=\"Number of slices\"\n            error={!!errors.no_of_slices}\n            helperText={errors.no_of_slices?.message}\n            inputProps={{\n              type: 'number',\n              step: 1,\n              min: 0,\n              ...register('no_of_slices'),\n            }}\n          />\n          <TextField\n            className=\"customField\"\n            InputLabelProps={{\n              className: 'field',\n            }}\n            style={{ overflow: 'hidden' }}\n            id=\"standard-basic\"\n            label=\"Diameter\"\n            error={!!errors.diameter}\n            helperText={errors.diameter?.message}\n            inputProps={{\n              type: 'number',\n              step: 0.01,\n              min: 0,\n              ...register('diameter'),\n            }}\n          />\n        </>\n      ) : null}\n      {soup ? (\n        <TextField\n          className=\"customField\"\n          InputLabelProps={{\n            className: 'field',\n          }}\n          style={{ overflow: 'hidden' }}\n          id=\"standard-basic\"\n          label=\"Spiciness scale\"\n          error={!!errors.spiciness_scale}\n          helperText={errors.spiciness_scale?.message}\n          inputProps={{\n            type: 'number',\n            step: 1,\n            min: 1,\n            max: 10,\n            ...register('spiciness_scale'),\n          }}\n        />\n      ) : null}\n      {sandwich ? (\n        <TextField\n          className=\"customField\"\n          InputLabelProps={{\n            className: 'field',\n          }}\n          style={{ overflow: 'hidden' }}\n          id=\"standard-basic\"\n          label=\"Slices of bread\"\n          error={!!errors.slices_of_bread}\n          helperText={errors.slices_of_bread?.message}\n          inputProps={{\n            type: 'number',\n            step: 1,\n            min: 1,\n            ...register('slices_of_bread'),\n          }}\n        />\n      ) : null}\n      <Button\n        className=\"customField\"\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"submit\"\n      >\n        Send\n      </Button>\n    </FormWrapper>\n  );\n};\n\nexport default Form;\n","import Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 400,\n    maxWidth: '90vw',\n    padding: 30,\n    opacity: 0.95,\n  },\n  title: {\n    fontSize: 14,\n    marginBottom: 20,\n  },\n});\n\nconst FormContainer = ({ title, children }) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {title}\n        </Typography>\n        {children}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default FormContainer;\n\nFormContainer.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport Form from './components/Form/Form';\nimport FormContainer from './components/FormContainer/FormContainer';\n\nconst Wrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: grid;\n  place-items: center;\n  background-image: url('https://images.unsplash.com/photo-1498654896293-37aacf113fd9?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80');\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center 0;\n  background-attachment: fixed;\n  overflow: hidden;\n`;\n\nconst App = () => (\n  <Wrapper>\n    <FormContainer title=\"Choose your dish\">\n      <Form />\n    </FormContainer>\n  </Wrapper>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <MuiPickersUtilsProvider utils={DateFnsUtils}>\n    <App />\n  </MuiPickersUtilsProvider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}