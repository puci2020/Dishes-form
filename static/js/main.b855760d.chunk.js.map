{"version":3,"sources":["utils/Date.js","components/Form/Form.js","components/FormContainer/FormContainer.js","App.js","reportWebVitals.js","index.js"],"names":["timeToString","time","hour","getHours","minutes","getMinutes","seconds","getSeconds","FormWrapper","styled","form","schema","yup","shape","name","required","preparation_time","type","no_of_slices","when","is","then","min","typeError","diameter","spiciness_scale","max","slices_of_bread","Form","useState","selectedDate","setSelectedDate","types","setTypes","pizza","setPizza","soup","setSoup","sandwich","setSandwich","useForm","resolver","yupResolver","register","handleSubmit","reset","setValue","unregister","errors","formState","handleSend","data","a","axios","post","process","res","console","log","alertify","success","shouldValidate","alert","message","error","useEffect","onSubmit","TextField","InputLabelProps","className","style","overflow","label","InputProps","helperText","TimePicker","ampm","openTo","views","format","value","onChange","newValue","select","e","target","inputProps","MenuItem","step","Typography","id","gutterBottom","Slider","defaultValue","getAriaValueText","aria-labelledby","marks","valueLabelDisplay","Button","variant","color","useStyles","makeStyles","root","width","maxWidth","padding","opacity","title","fontSize","marginBottom","FormContainer","children","classes","Card","CardContent","Wrapper","div","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","utils","DateFnsUtils","document","getElementById"],"mappings":"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","file":"static/js/main.b855760d.chunk.js","sourcesContent":["const timeToString = (time) => {\n  let hour = time?.getHours();\n  let minutes = time?.getMinutes();\n  let seconds = time?.getSeconds();\n\n  if (hour < 10) hour = `0${hour}`;\n  if (minutes < 10) minutes = `0${minutes}`;\n  if (seconds < 10) seconds = `0${seconds}`;\n\n  return `${hour}:${minutes}:${seconds}`;\n};\n\nexport default timeToString;\n","import { yupResolver } from '@hookform/resolvers/yup';\nimport {\n  Button,\n  MenuItem,\n  Slider,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport { TimePicker } from '@material-ui/pickers';\nimport alertify from 'alertifyjs';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport styled from 'styled-components';\nimport * as yup from 'yup';\nimport timeToString from '../../utils/Date';\n\nconst FormWrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-items: center;\n  width: 100%;\n\n  .customField {\n    margin-top: 20px;\n  }\n\n  .field {\n    overflow: hidden;\n  }\n`;\n\nconst schema = yup.object().shape({\n  name: yup.string().required('Name is required'),\n  preparation_time: yup.string().required('Preparation time is required'),\n  type: yup.string().required('Dish type is required'),\n  no_of_slices: yup.mixed().when('type', {\n    is: (type) => type === 'pizza',\n    then: yup\n      .number()\n      .min(1, 'Minimum 1 required')\n      .typeError('Number of slices is required')\n      .required(),\n  }),\n  diameter: yup.mixed().when('type', {\n    is: (type) => type === 'pizza',\n    then: yup\n      .number()\n      .min(0.01, 'Minimum 0.01 required')\n      .typeError('Diameter is required')\n      .required(),\n  }),\n  spiciness_scale: yup.mixed().when('type', {\n    is: (type) => type === 'soup',\n    then: yup\n      .number()\n      .min(1, 'Minimum 1 required')\n      .max(10, 'Maximum of 10 allowed')\n      .typeError('Spiciness scale is required')\n      .required(),\n  }),\n  slices_of_bread: yup.mixed().when('type', {\n    is: (type) => type === 'sandwich',\n    then: yup\n      .number()\n      .min(1, 'Minimum 1 required')\n      .typeError('Slices of bread is required')\n      .required(),\n  }),\n});\n\nconst Form = () => {\n  const API_URL = process.env.REACT_APP_API_URL;\n\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [types, setTypes] = useState('');\n  const [pizza, setPizza] = useState(false);\n  const [soup, setSoup] = useState(false);\n  const [sandwich, setSandwich] = useState(false);\n  const {\n    register,\n    handleSubmit,\n    reset,\n    setValue,\n    unregister,\n    formState: { errors },\n  } = useForm({ resolver: yupResolver(schema) });\n\n  const resetFields = () => {\n    setPizza(false);\n    setSoup(false);\n    setSandwich(false);\n\n    setSelectedDate(null);\n    setTypes('');\n    setValue('preparation_time', null, {\n      shouldValidate: false,\n    });\n    reset();\n  };\n\n  const getSpiciness = (value) => console.log(value);\n\n  const handleSend = async (data) => {\n    try {\n      await axios.post(`${API_URL}/dishes`, data).then((res) => {\n        console.log(res);\n        alertify.success('Sent successfully');\n        resetFields();\n      });\n    } catch (err) {\n      alertify.alert('Error', err.message, () => {\n        alertify.error('Something went wrong');\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (types === 'pizza') {\n      setPizza(true);\n      setSoup(false);\n      setSandwich(false);\n      unregister('spiciness_scale');\n      unregister('slices_of_bread');\n    }\n    if (types === 'soup') {\n      setPizza(false);\n      setSoup(true);\n      setSandwich(false);\n      unregister('no_of_slices');\n      unregister('diameter');\n      unregister('slices_of_bread');\n    }\n\n    if (types === 'sandwich') {\n      setPizza(false);\n      setSoup(false);\n      setSandwich(true);\n      unregister('no_of_slices');\n      unregister('diameter');\n      unregister('spiciness_scale');\n    }\n  }, [types]);\n\n  return (\n    <FormWrapper onSubmit={handleSubmit(handleSend)}>\n      <TextField\n        InputLabelProps={{\n          className: 'field',\n        }}\n        style={{ overflow: 'hidden' }}\n        label=\"Name\"\n        InputProps={{ ...register('name') }}\n        error={!!errors.name}\n        helperText={errors.name?.message}\n      />\n      <TimePicker\n        className=\"customField\"\n        InputLabelProps={{\n          className: 'field',\n        }}\n        ampm={false}\n        openTo=\"hours\"\n        views={['hours', 'minutes', 'seconds']}\n        format=\"HH:mm:ss\"\n        label=\"Preparation time\"\n        value={selectedDate}\n        onChange={(newValue) => {\n          setSelectedDate(newValue);\n          setValue('preparation_time', timeToString(newValue), {\n            shouldValidate: true,\n          });\n        }}\n        InputProps={{ ...register('preparation_time') }}\n        error={!!errors.preparation_time}\n        helperText={errors.preparation_time?.message}\n      />\n      <TextField\n        InputLabelProps={{\n          className: 'field',\n        }}\n        select\n        className=\"customField\"\n        label=\"Dish type\"\n        value={types}\n        onChange={(e) => {\n          setTypes(e.target.value);\n        }}\n        inputProps={{ ...register('type') }}\n        error={!!errors.type}\n        helperText={errors.type?.message}\n      >\n        <MenuItem value=\"pizza\">Pizza</MenuItem>\n        <MenuItem value=\"soup\">Soup</MenuItem>\n        <MenuItem value=\"sandwich\">Sandwich</MenuItem>\n      </TextField>\n      {pizza ? (\n        <>\n          <TextField\n            className=\"customField\"\n            InputLabelProps={{\n              className: 'field',\n            }}\n            style={{ overflow: 'hidden' }}\n            label=\"Number of slices\"\n            error={!!errors.no_of_slices}\n            helperText={errors.no_of_slices?.message}\n            inputProps={{\n              type: 'number',\n              step: 1,\n              ...register('no_of_slices'),\n            }}\n          />\n          <TextField\n            className=\"customField\"\n            InputLabelProps={{\n              className: 'field',\n            }}\n            style={{ overflow: 'hidden' }}\n            label=\"Diameter\"\n            error={!!errors.diameter}\n            helperText={errors.diameter?.message}\n            inputProps={{\n              type: 'number',\n              step: 0.01,\n              ...register('diameter'),\n            }}\n          />\n        </>\n      ) : null}\n      {soup ? (\n        <>\n          <Typography\n            id=\"discrete-slider-small-steps\"\n            className=\"customField\"\n            gutterBottom\n          >\n            Spiciness scale\n          </Typography>\n          <Slider\n            defaultValue={1}\n            getAriaValueText={(value) => setValue('spiciness_scale', value)}\n            aria-labelledby=\"discrete-slider-small-steps\"\n            step={1}\n            marks\n            min={1}\n            max={10}\n            valueLabelDisplay=\"auto\"\n          />\n        </>\n      ) : null}\n      {sandwich ? (\n        <TextField\n          className=\"customField\"\n          InputLabelProps={{\n            className: 'field',\n          }}\n          style={{ overflow: 'hidden' }}\n          label=\"Slices of bread\"\n          error={!!errors.slices_of_bread}\n          helperText={errors.slices_of_bread?.message}\n          inputProps={{\n            type: 'number',\n            step: 1,\n            ...register('slices_of_bread'),\n          }}\n        />\n      ) : null}\n      <Button\n        className=\"customField\"\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"submit\"\n      >\n        Send\n      </Button>\n    </FormWrapper>\n  );\n};\n\nexport default Form;\n","import Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 400,\n    maxWidth: '90vw',\n    padding: 30,\n    opacity: 0.95,\n  },\n  title: {\n    fontSize: 14,\n    marginBottom: 20,\n  },\n});\n\nconst FormContainer = ({ title, children }) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {title}\n        </Typography>\n        {children}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default FormContainer;\n\nFormContainer.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport Form from './components/Form/Form';\nimport FormContainer from './components/FormContainer/FormContainer';\n\nconst Wrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: grid;\n  place-items: center;\n  background-image: url('https://images.unsplash.com/photo-1498654896293-37aacf113fd9?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80');\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center 0;\n  background-attachment: fixed;\n  overflow: hidden;\n`;\n\nconst App = () => (\n  <Wrapper>\n    <FormContainer title=\"Choose your dish\">\n      <Form />\n    </FormContainer>\n  </Wrapper>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport 'alertifyjs/build/css/alertify.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <MuiPickersUtilsProvider utils={DateFnsUtils}>\n    <App />\n  </MuiPickersUtilsProvider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}